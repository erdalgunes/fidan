name: AI-Powered PR Review

on:
  pull_request:
    types: [opened, synchronize, reopened]
    # Skip draft PRs to save costs
    branches: [main, develop]

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  ai-review:
    name: AI Code Review
    runs-on: ubuntu-latest
    if: ${{ !github.event.pull_request.draft }}
    
    steps:
      - name: Checkout PR
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Setup Python and uv
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          
      - name: Install uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.local/bin" >> $GITHUB_PATH
          
      - name: Install AI CLI Tools
        env:
          # Use Personal Access Token for private repo access (fallback to GITHUB_TOKEN)
          GH_TOKEN: ${{ secrets.PERSONAL_GITHUB_TOKEN || secrets.GITHUB_TOKEN }}
        run: |
          # Install private tavily and gpt5 packages from GitHub
          echo "Installing tavily and gpt5 CLI tools..."
          
          # Check token type and authenticate
          if [ -n "${{ secrets.PERSONAL_GITHUB_TOKEN }}" ]; then
            echo "üîë Using Personal Access Token for private repo access"
            echo "${{ secrets.PERSONAL_GITHUB_TOKEN }}" | gh auth login --with-token || true
          else
            echo "‚ö†Ô∏è Using GitHub Actions token (limited private repo access)"
            echo "üí° Add PERSONAL_GITHUB_TOKEN secret for full functionality"
            echo "${{ secrets.GITHUB_TOKEN }}" | gh auth login --with-token || true
          fi
          
          gh auth status
          
          # Create uv project and install packages
          uv venv ai-tools
          source ai-tools/bin/activate
          
          # Install tavily from private GitHub repo using gh cli
          echo "Installing tavily..."
          if gh repo clone erdalgunes/tavily-cli /tmp/tavily-cli; then
            echo "‚úÖ Tavily repo cloned successfully"
            uv pip install /tmp/tavily-cli
            echo "‚úÖ Tavily installed via uv"
          else
            echo "‚ùå Tavily repo clone failed"
            if [ -z "${{ secrets.PERSONAL_GITHUB_TOKEN }}" ]; then
              echo "üîê Likely cause: GitHub Actions token cannot access private repos"
              echo "üí° Solution: Add PERSONAL_GITHUB_TOKEN secret with repo access"
            fi
            gh repo list erdalgunes --limit 10 | grep -i tavily || echo "No tavily repo found in list"
          fi
          
          # Install gpt5 from private GitHub repo using gh cli
          echo "Installing gpt5..." 
          if gh repo clone erdalgunes/gpt5-cli /tmp/gpt5-cli; then
            echo "‚úÖ GPT-5 repo cloned successfully"
            uv pip install /tmp/gpt5-cli
            echo "‚úÖ GPT-5 installed via uv"
          else
            echo "‚ùå GPT-5 repo clone failed"
            if [ -z "${{ secrets.PERSONAL_GITHUB_TOKEN }}" ]; then
              echo "üîê Likely cause: GitHub Actions token cannot access private repos"
              echo "üí° Solution: Add PERSONAL_GITHUB_TOKEN secret with repo access"
            fi
            gh repo list erdalgunes --limit 10 | grep -i gpt5 || echo "No gpt5 repo found in list"
          fi
          
          # Add to PATH for subsequent steps
          echo "$(pwd)/ai-tools/bin" >> $GITHUB_PATH
          
          # Verify installation
          echo "Checking installed tools:"
          if command -v tavily >/dev/null 2>&1; then
            echo "‚úÖ Tavily: $(tavily --version 2>/dev/null || echo 'installed but version check failed')"
          else
            echo "‚ùå Tavily: not available"
          fi
          
          if command -v gpt5 >/dev/null 2>&1; then
            echo "‚úÖ GPT-5: $(gpt5 --version 2>/dev/null || echo 'installed but version check failed')"
          else
            echo "‚ùå GPT-5: not available"
          fi
          
      - name: Get Changed Files
        id: changed-files
        run: |
          # Get list of changed files with their status
          git diff --name-status origin/${{ github.base_ref }}...${{ github.sha }} > changed_files.txt
          echo "Files changed:"
          cat changed_files.txt
          
          # Count changes for cost control
          TOTAL_CHANGES=$(git diff --numstat origin/${{ github.base_ref }}...${{ github.sha }} | awk '{ lines += $1 + $2 } END { print lines }')
          echo "total_changes=$TOTAL_CHANGES" >> $GITHUB_OUTPUT
          
          # Skip review if changes are too large (cost control)
          if [ "$TOTAL_CHANGES" -gt 2000 ]; then
            echo "skip_review=true" >> $GITHUB_OUTPUT
            echo "‚ö†Ô∏è PR too large ($TOTAL_CHANGES lines) - skipping AI review for cost control"
          else
            echo "skip_review=false" >> $GITHUB_OUTPUT
          fi
          
      - name: Research Dependencies and Security
        if: steps.changed-files.outputs.skip_review == 'false'
        id: tavily-research
        run: |
          echo "Researching security and best practices..."
          
          # Extract dependency changes
          DEPS_CHANGED=""
          if grep -q "build.gradle\|package.json\|requirements.txt\|Cargo.toml\|go.mod" changed_files.txt; then
            DEPS_CHANGED="Dependencies modified in this PR"
          fi
          
          # Extract file types for targeted research  
          FILE_TYPES=$(git diff --name-only origin/${{ github.base_ref }}...${{ github.sha }} | sed 's/.*\.//' | sort -u | tr '\n' ' ')
          echo "file_types=$FILE_TYPES" >> $GITHUB_OUTPUT
          echo "deps_changed=$DEPS_CHANGED" >> $GITHUB_OUTPUT
          
          # Research security if dependencies changed
          if [ -n "$DEPS_CHANGED" ]; then
            echo "üîç Dependencies changed - will research security implications"
          fi
          
      - name: AI Code Analysis
        if: steps.changed-files.outputs.skip_review == 'false'
        id: ai-analysis
        run: |
          # Create a focused diff for analysis (limit size for cost control)
          git diff origin/${{ github.base_ref }}...${{ github.sha }} -- '*.kt' '*.java' '*.js' '*.ts' '*.py' '*.go' '*.rs' > code_diff.txt
          
          # Truncate if too large
          if [ $(wc -c < code_diff.txt) -gt 50000 ]; then
            head -c 50000 code_diff.txt > code_diff_truncated.txt
            mv code_diff_truncated.txt code_diff.txt
            echo "‚ö†Ô∏è Code diff truncated for analysis" >> analysis_notes.txt
          fi
          
          echo "üìä Code diff prepared for AI analysis ($(wc -c < code_diff.txt) chars)"
          
      - name: Generate AI Review
        if: steps.changed-files.outputs.skip_review == 'false'
        run: |
          cat > review_script.sh << 'EOF'
          #!/bin/bash
          
          # Activate AI tools environment
          source ai-tools/bin/activate 2>/dev/null || true
          
          echo "# ü§ñ AI-Powered Code Review"
          echo ""
          
          # Security research using Tavily (if available)
          if command -v tavily >/dev/null 2>&1 && [ -n "${{ steps.tavily-research.outputs.deps_changed }}" ]; then
            echo "## üîê Security Analysis"
            tavily "security vulnerabilities ${{ steps.tavily-research.outputs.file_types }} dependencies 2024" --max-results 2 2>/dev/null || echo "‚ö†Ô∏è Security research failed"
            echo ""
          fi
          
          # Code analysis using GPT-5 (if available)  
          if command -v gpt5 >/dev/null 2>&1; then
            echo "## üìù Code Analysis"
            
            # Create analysis prompt
            ANALYSIS_PROMPT="Analyze this code diff for a ${{ github.event.repository.name }} project:

          $(head -c 30000 code_diff.txt 2>/dev/null || echo "No code diff available")

          Focus on:
          1. üêõ Potential bugs or issues
          2. üîí Security concerns  
          3. ‚ö° Performance implications
          4. üßπ Code quality improvements
          5. üèóÔ∏è Architecture feedback

          Provide specific, actionable feedback with emojis. If no issues found, say so briefly."

            # Run analysis with cost control
            echo "$ANALYSIS_PROMPT" | gpt5 --effort medium --max-tokens 1000 2>/dev/null || echo "‚ö†Ô∏è Code analysis failed"
          else
            echo "## üìù Code Analysis"
            echo "‚ö†Ô∏è GPT-5 not available - checking installation..."
            echo "PATH: $PATH"
            echo "Which gpt5: $(which gpt5 2>/dev/null || echo 'not found')"
          fi
          
          echo ""
          echo "## üìã Review Summary"
          echo "- **Changed files**: $(wc -l < changed_files.txt)"
          echo "- **Total changes**: ${{ steps.changed-files.outputs.total_changes }} lines"
          echo "- **File types**: ${{ steps.tavily-research.outputs.file_types }}"
          echo "- **Dependencies**: ${{ steps.tavily-research.outputs.deps_changed || 'No dependency changes detected' }}"
          
          echo ""
          echo "---"
          echo "*ü§ñ Generated by AI PR Review Bot | [Feedback](https://github.com/${{ github.repository }}/issues)*"
          EOF
          
          chmod +x review_script.sh
          ./review_script.sh > ai_review.md
          
      - name: Post AI Review Comment
        if: steps.changed-files.outputs.skip_review == 'false'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            // Read the AI review
            let reviewContent = '';
            try {
              reviewContent = fs.readFileSync('ai_review.md', 'utf8');
            } catch (error) {
              reviewContent = '## ü§ñ AI Review\n\n‚ö†Ô∏è Review generation failed. Please check the logs.';
            }
            
            // Check if we already commented on this PR
            const comments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const botComment = comments.data.find(comment => 
              comment.body.includes('ü§ñ Generated by AI PR Review Bot')
            );
            
            if (botComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: reviewContent
              });
              console.log('Updated existing AI review comment');
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: reviewContent
              });
              console.log('Created new AI review comment');
            }
            
      - name: Handle Large PR
        if: steps.changed-files.outputs.skip_review == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const reviewContent = `## ü§ñ AI Review - PR Too Large
            
            This PR has ${{ steps.changed-files.outputs.total_changes }} lines of changes, which exceeds our analysis limit of 2000 lines.
            
            **Recommendations:**
            - Consider splitting this PR into smaller, focused changes
            - Each PR should ideally be < 500 lines for better reviewability
            - Use our [PR size guidelines](.github/pr-scope-guidelines.md) for reference
            
            *ü§ñ AI review will be available once the PR size is reduced*`;
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: reviewContent
            });